AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates a VPC with both public and private subnets. 
Parameters: 
  EnvironmentName: 
    Type: String
    Default: prod-vpc
    Description: Name of the environment.

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.29.0.0 to 10.29.255.255
  # We create five subnets with the ip rages
  #
  # 10.29.0.0 - 10.29.0.255 => public 1
  # 10.29.1.0 - 10.29.1.255 => public 2
  # 10.29.100.0 - 10.29.100.255 => private 1
  # 10.29.101.0 - 10.29.101.255 => private 2
  # 10.29.102.0 - 10.29.102.255 => private 3
  #
  SubnetConfig:
    VPC:
      CIDR: '10.29.0.0/16'
    PublicOne:
      CIDR: '10.29.1.0/24'
    PublicTwo:
      CIDR: '10.29.2.0/24'
    PrivateOne:
      CIDR: '10.29.100.0/24'
    PrivateTwo:
      CIDR: '10.29.101.0/24'
    PrivateThree:
      CIDR: '10.29.102.0/24'

Resources:
  # VPC in which containers will be networked.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, Vpc] ] 

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PublicSubnetOne] ]       
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PublicSubnetTwo] ]       

  # Three private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PrivateSubnetOne] ]       
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PrivateSubnetTwo] ]       

  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PrivateSubnetThree] ]       

  # Setup networking resources for the public subnets.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PublicRouteTable] ]        
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'      
      Tags:
      - Key: Name
        Value: !Join [ '-', [!Ref EnvironmentName, PrivateRouteTable] ]        
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetThree
      RouteTableId: !Ref PrivateRouteTable      


# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because some of them are exported with specific
# names so that other task-related CF templates can use them.
Outputs:
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PrivateSubnetTwo' ] ]
  PrivateSubnetThree:
    Description: Private subnet three
    Value: !Ref 'PrivateSubnetThree'
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PrivateSubnetThree' ] ]
  PublicRouteTable:
    Description: PublicRouteTable
    Value: !Ref PublicRouteTable
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PublicRouteTable' ] ]    
  PrivateRouteTable:
    Description: PrivateRouteTable
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, 'PrivateRouteTable' ] ]        
